% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kernelshap.R
\name{kernelshap}
\alias{kernelshap}
\alias{kernelshap.default}
\alias{kernelshap.lm}
\alias{kernelshap.glm}
\alias{kernelshap.ranger}
\alias{kernelshap.Learner}
\title{Kernel SHAP}
\usage{
kernelshap(object, ...)

\method{kernelshap}{default}(
  object,
  X,
  bg_X,
  pred_fun,
  bg_w = NULL,
  paired_sampling = TRUE,
  m = "auto",
  exact = TRUE,
  tol = 0.01,
  max_iter = 250,
  verbose = TRUE,
  ...
)

\method{kernelshap}{lm}(
  object,
  X,
  bg_X,
  pred_fun = stats::predict,
  bg_w = NULL,
  paired_sampling = TRUE,
  m = "auto",
  exact = TRUE,
  tol = 0.01,
  max_iter = 250,
  verbose = TRUE,
  ...
)

\method{kernelshap}{glm}(
  object,
  X,
  bg_X,
  pred_fun = stats::predict,
  bg_w = NULL,
  paired_sampling = TRUE,
  m = "auto",
  exact = TRUE,
  tol = 0.01,
  max_iter = 250,
  verbose = TRUE,
  ...
)

\method{kernelshap}{ranger}(
  object,
  X,
  bg_X,
  pred_fun = function(m, X, ...) stats::predict(m, X, ...)$predictions,
  bg_w = NULL,
  paired_sampling = TRUE,
  m = "auto",
  exact = TRUE,
  tol = 0.01,
  max_iter = 250,
  verbose = TRUE,
  ...
)

\method{kernelshap}{ranger}(
  object,
  X,
  bg_X,
  pred_fun = function(m, X, ...) stats::predict(m, X, ...)$predictions,
  bg_w = NULL,
  paired_sampling = TRUE,
  m = "auto",
  exact = TRUE,
  tol = 0.01,
  max_iter = 250,
  verbose = TRUE,
  ...
)

\method{kernelshap}{Learner}(
  object,
  X,
  bg_X,
  pred_fun = function(m, X, ...) m$predict_newdata(X)$response,
  bg_w = NULL,
  paired_sampling = TRUE,
  m = "auto",
  exact = TRUE,
  tol = 0.01,
  max_iter = 250,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{Model object.}

\item{...}{Additional arguments passed to \code{pred_fun()}.}

\item{X}{A (n x p) matrix, data.frame, tibble or data.table of rows to be explained.
Important: The columns should only represent model features, not the response.}

\item{bg_X}{Background data used to integrate out "switched off" features.
It should contain the same columns as \code{X}. A good size is around 50 to 200 rows.
Columns not in \code{X} are silently dropped and the columns are arranged into
the order as they appear in \code{X}.}

\item{pred_fun}{Prediction function of the form \code{function(object, X, ...)}
providing K >= 1 numeric predictions per row. Its first argument represents the
model \code{object}, its second argument a data structure like \code{X}. Additional
arguments are passed via \code{...}.}

\item{bg_w}{Optional vector of case weights for each row of \code{bg_X}.}

\item{paired_sampling}{Logical flag indicating whether to use paired sampling.
The default is \code{TRUE}. This means that with every feature subset S,
also its complement is evaluated, which leads to considerably faster convergence.}

\item{m}{Number of feature subsets S to be evaluated during one iteration.
The default, "auto", equals \code{max(trunc(20*sqrt(p)), 5*p)}, where p is the
number of features.
For the paired sampling strategy, 2m evaluations are done per iteration.}

\item{exact}{If \code{TRUE} (default) and the number of features p is at most 5,
the algorithm will produce exact Kernel SHAP values. In this case, the arguments
\code{m}, \code{paired_sampling}, \code{tol}, and \code{max_iter} are ignored.}

\item{tol}{Tolerance determining when to stop. The algorithm keeps iterating until
max(sigma_n) / diff(range(beta_n)) < tol, where the beta_n are the SHAP values
of a given observation and sigma_n their standard errors. For multidimensional
predictions, the criterion must be satisfied for each dimension separately.
The stopping criterion uses the fact that standard errors and SHAP values are all
on the same scale.}

\item{max_iter}{If the stopping criterion (see \code{tol}) is not reached after
\code{max_iter} iterations, the algorithm stops.}

\item{verbose}{Set to \code{FALSE} to suppress messages, warnings, and the progress bar.}
}
\value{
An object of class "kernelshap" with the following components:
\itemize{
\item \code{S}: (n x p) matrix with SHAP values or, if the model output has dimension K > 1,
a list of K such matrices.
\item \code{X}: Same as input argument \code{X}.
\item \code{baseline}: A vector of length K representing the average prediction on the background data.
\item \code{SE}: Standard errors corresponding to \code{S} (and organized like \code{S}).
\item \code{n_iter}: Integer vector of length n providing the number of iterations per row of \code{X}.
\item \code{converged}: Logical vector of length n indicating convergence per row of \code{X}.
}
}
\description{
Implements a multidimensional version of the Kernel SHAP algorithm explained in
detail in Covert and Lee (2021). It is an iterative refinement of the original
Kernel SHAP algorithm of Lundberg and Lee (2017). The algorithm is applied to each
row in \code{X}. Its behaviour depends on the number of features p:
\itemize{
\item 2 <= p <= 5: Exact Kernel SHAP values are returned.
(Exact regarding the given background data.)
\item p > 5: Sampling version of Kernel SHAP.
The algorithm iterates until Kernel SHAP values are sufficiently accurate.
Approximate standard errors of the SHAP values are returned.
\item p = 1: Exact Shapley values are returned.
}
}
\details{
During each iteration, \code{m} feature subsets are evaluated until the worst
standard error of the SHAP values is small enough relative to the range of the SHAP values.
This stopping criterion was suggested in Covert and Lee (2021). In the multi-output case,
the criterion must be fulfilled for each dimension separately until iteration stops.
}
\section{Methods (by class)}{
\itemize{
\item \code{kernelshap(default)}: Default Kernel SHAP method.

\item \code{kernelshap(lm)}: Kernel SHAP method for "lm" models.

\item \code{kernelshap(glm)}: Kernel SHAP method for "glm" models.

\item \code{kernelshap(ranger)}: Kernel SHAP method for "ranger" models.

\item \code{kernelshap(ranger)}: Kernel SHAP method for "ranger" models, see Readme for an example.

\item \code{kernelshap(Learner)}: Kernel SHAP method for "mlr3" models, see Readme for an example.

}}
\examples{
# Matrix input works as well, and pred_fun may contain preprocessing steps
fit <- stats::lm(Sepal.Length ~ ., data = iris[1:4])
pred_fun <- function(fit, X) stats::predict(fit, as.data.frame(X))
X <- data.matrix(iris[2:4])
s <- kernelshap(fit, X[1:3, ], bg_X = X, pred_fun = pred_fun)
s

# A multiple linear regression
fit <- stats::lm(Sepal.Length ~ ., data = iris)
s <- kernelshap(fit, iris[1:2, -1], bg_X = iris[, -1])
s

# Multivariate model
fit <- stats::lm(
  as.matrix(iris[1:2]) ~ Petal.Length + Petal.Width + Species, data = iris
)
s <- kernelshap(fit, iris[1:4, 3:5], bg_X = iris)
s

# Logistic regression
fit <- stats::glm(
  I(Species == "virginica") ~ Sepal.Length + Sepal.Width, 
  data = iris, 
  family = binomial
)

# On scale of linear predictor
s <- kernelshap(fit, iris[1:2], bg_X = iris[1:2])
s

# On response (probability scale)
s <- kernelshap(fit, iris[1:2], bg_X = iris[1:2], type = "response")
s
}
\references{
\enumerate{
\item Ian Covert and Su-In Lee. Improving KernelSHAP: Practical Shapley Value Estimation Using Linear Regression. Proceedings of The 24th International Conference on Artificial Intelligence and Statistics, PMLR 130:3457-3465, 2021.
\item Scott M. Lundberg and Su-In Lee. A Unified Approach to Interpreting Model Predictions. Advances in Neural Information Processing Systems 30, 2017.
}
}
